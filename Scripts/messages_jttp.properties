#
# messages_jttp.properties
#
# Editable properties file containing console and logging messages.
#
# This is an ordinary properties file that can have the format described
# at "https://docs.oracle.com/javase/8/docs/api/java/util/Properties.html#load-java.io.Reader-"
#
#
# Editing guide:
#
#  - Use ' = ' as the property name-value separator.
#
#  - Line up property name-value separators so that they are all in the 
#    same column.
#
#  - Continue lines whose values extend further than 80 characters on
#    the following line underneath 2 spaces after the beginning of the 
#    value column.
#

# -----------------------------------------------------------------------------
#
#                                Error messages
#
# -----------------------------------------------------------------------------

cmdline.error.missing.required.arg      = error {0}: Missing required \
                                            argument {1}. Run with --help to \
                                            see details.
cmdline.error.opt.missing.arg           = error {0}: -{1} requires {2}
cmdline.error.runtime.exception.msg     = error {0}: {1}
cmdline.error.unknown.option            = error {0}: Unknown option {1}. Run \
                                            with --help to see details.

cmdline.help.header                     = Send an HTTP(S) request to a web \
                                            server and process the response.
cmdline.help.footer                     = See https://github.com/argherna/\
                                            Dotfiles/blob/master/man/Jttp.md \
                                            for full documentation.

error.null.connection                   = error: connection not established
error.util.too.many.chars               = error: More test characters \
                                            received than in target array!


# -----------------------------------------------------------------------------
#
#                        Application Prompts & Messages
#
# -----------------------------------------------------------------------------

# Command line argument descriptions.
#
jttp.arg.method                      = HTTP method to run, one of DELETE, GET \
                                         (default), HEAD, OPTIONS, PATCH, \
                                         POST, PUT, or TRACE.
jttp.arg.url                         = URL of the request.
jttp.arg.reqitem                     = Key-value pairs to be included in the \
                                         request. Separators are ":" for \
                                         headers, "==" for query parameters, \
                                         "=" for data fields (json or form), \
                                         "@" for form file fields.

# Command line option descriptions.
#
jttp.opt.auth                        = Authentication credentials. If no \
                                         password is set, user will be \
                                         prompted for one.
jttp.opt.download                    = Save the response body in a file \
                                         instead of printing it.
jttp.opt.help                        = Show help message and exit.
jttp.opt.noverify                    = Turn off certificate and host \
                                         verification.
jttp.opt.offline                     = Build and print the request without \
                                        actually sending it.
jttp.opt.output                      = Save files downloaded (with -d) to \
                                        this file.
jttp.opt.prettyprint                 = Apply formatting, one of NONE, \
                                        COLOR, INDENT, or ALL (default).
jttp.opt.preprocessscript            = Script to run before the request has \
                                        fetched data but after initial setup \
                                        has been performed.
jttp.opt.preprocessscriptarg         = Argument to pass to the \
                                         --pre-process-script. This can be \
                                         specified as many times as you need \
                                         for your script.
jttp.opt.postprocessscript           = Script to run after the request has \
                                        fetched data but before final output \
                                        is handled.
jttp.opt.postprocessscriptarg        = Argument to pass to the \
                                         --post-process-script. This can be \
                                         specified as many times as you need \
                                         for your script.
jttp.opt.print                       = What entities to print (H = request \
                                         headers, B = request body, h = \
                                         response headers, b = response body. \
                                         default is "hb").
jttp.opt.readonlysession             = Read but do not update the session \
                                         specified by -s.
jttp.opt.reqmimetype                 = Request MIME type, one of FORM, JSON \
                                         (default), or MULTIPART.
jttp.opt.sessionname                 = Create or reuse and update a session. \
                                        Within a session, headers and cookies \
                                        set are persisted between requests.
jttp.opt.verbose                     = Print the entire request and response.
jttp.opt.version                     = Show version information and exit.

jttp.password.prompt                 = Enter password: 


# -----------------------------------------------------------------------------
#
#                               Logger messages
#
# -----------------------------------------------------------------------------

logger.trace.bytes.transferred       = {0} bytes saved to temporary file {1}.
logger.debug.exec.preprocess         = Executing preprocess script.
logger.debug.exec.postprocess        = Executing post process script.
logger.info.no.response.body.sent    = No response body sent from server.
logger.warning.noverify              = Executing {0} with --no-verify set to \
                                         true.
logger.warning.null.scriptengine     = script error: ScriptEngine {0} not \
                                         found. Skipping script execution.
logger.warning.script.file.not.found = script error: Script {0} not found. \
                                         Skipping script execution.
logger.warning.script.file.close     = script error: Script file {0} not \
                                         closed!
logger.warning.script.exec.error     = script error: {0} had an execution \
                                         error.
logger.warning.xmlerror              = xml error: {0}
logger.warning.xml.history.error     = xml error: Problem loading \
                                         history.xml. Generating new history.