{
	// Place your snippets for java here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"Builder class": {
		"prefix": "cbld",
		"body": [
			"${1|public,protected|} static class Builder {",
			"",
			"    $0",
			"",
			"    ${1|public,protected|} ${2:$TM_FILENAME_BASE} build() {",
			"        return new ${2:$TM_FILENAME_BASE}(this);",
			"    }",
			"}",
			"",
			"private ${1}(Builder builder) {",
			"    // TODO: map Builder fields to class fields",
			"}",
			""
		]
	},
	"Builder class, package private": {
		"prefix": "ppcb",
		"body": [
			"/**",
			" * Builder for ${1:$TM_FILENAME_BASE}.",
			" */",
			"static class Builder {",
			"",
			"    $0",
			"",
			"    ${1} build() {",
			"        return new ${1}(this);",
			"    }",
			"}",
			"",
			"private ${1}(Builder builder) {",
			"    // TODO: map Builder fields to class fields",
			"}",
			""
		]
	},
	"Builder field": {
		"prefix": "bfld",
		"body": [
			"private ${1:type} ${2:name};",
			"",
			"Builder ${2}(${1} ${2}) {",
			"    this.$2 = $2;",
			"    return this;$0",
			"}",
			""
		]
	},
	"Builder method": {
		"prefix": "bld",
		"body": [
			"Builder ${1:field}(${2:type} $1) {",
			"    this.$1 = $1;$0",
			"    return this;",
			"}",
			""
		]
	},
	"Read System Property String": {
		"prefix": "ssysp",
		"body": [
			"AccessController.doPrivileged((PrivilegedAction<String>) () -> System.getProperty(${1:propertyName}, ${2:defaultValue}));"
		]
	},
	"Read System Property Boolean": {
		"prefix": "bsysp",
		"body": [
			"AccessController.doPrivileged((PrivilegedAction<Boolean>) () -> Boolean.getBoolean(${1:propertyName}));"
		]
	},
	"Read System Property Integer": {
		"prefix": "isysp",
		"body": [
			"AccessController.doPrivileged((PrivilegedAction<Integer>) () -> Integer.getInteger(${1:propertyName}, ${2:defaultValue}));"
		]
	},
	"Read System Property Long": {
		"prefix": "lsysp",
		"body": [
			"AccessController.doPrivileged((PrivilegedAction<Long>) () -> Long.getLong(${1:propertyName}, ${2:defaultValue}));"
		]
	},
	"Declare JUL Logger": {
		"prefix": "jull",
		"body": [
			"private static final Logger LOGGER = Logger.getLogger(${1:loggerName});$0"
		]
	},
	"Declare JUL Logger with ResourceBundle": {
		"prefix": "rjull",
		"body": [
			"private static final Logger LOGGER = Logger.getLogger(${1:loggerName}, ${2:resourceBundle});$0"
		]
	},
	"Declare System Logger": {
		"prefix": "sysl",
		"body": [
			"private static final System.Logger LOGGER = System.getLogger(${1:loggerName});$0"
		]
	},
	"Declare System Logger with ResourceBundle": {
		"prefix": "rsysl",
		"body": [
			"private static final System.Logger LOGGER = System.getLogger(${1:loggerName}, ${2:resourceBundle});$0"
		]
	},
	"No-arg lambda": {
		"prefix": "nal",
		"body": "() -> $0"
	}
}